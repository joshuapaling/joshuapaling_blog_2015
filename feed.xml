
<!doctype html>
<html>
<head>
  <meta charset="utf-8" />
  <meta http-equiv='X-UA-Compatible' content='IE=edge;chrome=1' />
  <title>Joshua Paling </title>
  <link rel="alternate" type="application/atom+xml" title="Atom Feed" href="/feed.xml" />
  <link href="/stylesheets/application-3a039e88.css" rel="stylesheet" />
  <script src="/javascripts/application-547ab8eb.js"></script>
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
</head>
<body>
  <div class="page-wrapper">
    <header>
      <h1>Joshua Paling</h1>
      <nav>
        <a class="" href="/">Blog</a>
        <a class="" href="/about.html">About</a>
        <a class="" href="/resume.html">Resume</a>
        <a href="feed.xml">RSS</a>
        <a target="_blank" href="https://twitter.com/joshuapaling">@joshuapaling</a>
      </nav>
    </header>


<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Joshua Paling</title>
  <subtitle>Joshua Paling</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2025-08-08T10:00:00+10:00</updated>
  <author>
    <name>Joshua Paling</name>
  </author>
  <entry>
    <title>What I look for in a resume</title>
    <link rel="alternate" href="http://blog.url.com/blog/2025/08/08/resumes.html"/>
    <id>http://blog.url.com/blog/2025/08/08/resumes.html</id>
    <published>2025-08-08T10:00:00+10:00</published>
    <updated>2025-08-09T15:33:56+10:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">
&lt;p&gt;I‚Äôve been experimenting with having GPT help me grade resumes. This is what I‚Äôm looking for.&lt;/p&gt;

&lt;h3 id="two-modes-of-hiring"&gt;Two modes of hiring&lt;/h3&gt;

&lt;p&gt;Before we go further‚Ä¶&lt;/p&gt;

&lt;p&gt;Sometimes, there‚Äôs one role to fill. In that case, the resume must match the role closely.
Other times, there‚Äôs many roles to fill. In that case, you want to highlight candidates who match the role closely, but also flag any very strong candidates for consideration in other roles.&lt;/p&gt;

&lt;p&gt;We‚Äôre in the second mode of hiring.&lt;/p&gt;

&lt;h2 id="what-i-look-for-at-all-levels"&gt;What I look for at all levels&lt;/h2&gt;

&lt;h3 id="specific-not-generic"&gt;Specific, not generic&lt;/h3&gt;

&lt;p&gt;A good heuristic is, if someone else in a similar position (eg same level, same tech) replaces your name with theirs - would it now be 100% lies? How many edits would it take for them to make it truthful for themselves?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example - describing specific achievements&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;v1. Collaborated across teams to build dynamic, responsive websites.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;üî¥ Bad. Can be copied to many resume and hold true.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;v2. Collaborated across teams to optimise page loading, creating measurable impact on performance.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;üü† Only slightly better. Can be copied to most resumes and hold true.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;v3. Reduced checkout page load time by 40%, through lazy-loading route-level components for multiple payment methods and removing third-party script bloat. Partnered with Marketing to balance customer performance with analytics requirements.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;üü¢ Good. Almost certainly a lie if copied to anyone else‚Äôs resume.&lt;/p&gt;

&lt;h3 id="signal-not-noise"&gt;Signal, not noise&lt;/h3&gt;

&lt;p&gt;Focus on what makes you stand out, that‚Äôs relevant for the role you‚Äôre applying for.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example - describing specific skills&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;v1. &lt;strong&gt;Skills:&lt;/strong&gt; React.JS, Angular 2-16 Versions, SCSS, MUI, Bootstrap, CSS, Tailwind CSS, TypeScript, HTML5, jQuery, Responsive Web Design, Redux, Router, JSON, Webpack, AngularJS, Sass, REST API, React, Ionic Framework, Jest, XML, JavaScript library, Next.JS, Postman, Vite.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;üî¥ Bad. Are they all relevant for the role you‚Äôre applying for? Do you really still use jQuery regularly?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;v2. &lt;strong&gt;Skills:&lt;/strong&gt; React, Redux. Strong testing focus using Jest, React Testing Library, and Cypress. Deep TypeScript experience, including advanced language features and building robust, scalable type systems.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;üü¢ Good. Focus on what you personally are best at, what‚Äôs the core of the stack, and what differentiates you from other engineers.&lt;/p&gt;

&lt;h3 id="no-typos"&gt;No typos!&lt;/h3&gt;

&lt;p&gt;If there‚Äôs a typo in your resume, I‚Äôll assume you don‚Äôt test well.&lt;/p&gt;

&lt;h2 id="what-i-look-for-at-each-level"&gt;What I look for at each level&lt;/h2&gt;

&lt;p&gt;At all levels, we want to identify people who stand out as talented, ambitious, and hard-working. And, we want people who take initiative - who identify opportunities and push them forward, rather than just completing tickets assigned to them.&lt;/p&gt;

&lt;p&gt;Below are the tell-tale signs of such people, at each level.&lt;/p&gt;

&lt;h3 id="juniors"&gt;Juniors&lt;/h3&gt;

&lt;p&gt;In priority order:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Projects, projects, projects.&lt;/strong&gt; Put them live on the web and link to them. Make them novel and varied. Go beyond a basic portfolio site. I‚Äôve got 30 junior resumes to screen. Make your projects immediately stand out as the best.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Great grades.&lt;/strong&gt; Distinction or higher. If you‚Äôre on the Dean‚Äôs List, you‚Äôre instantly worth a call.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id="mids"&gt;Mids&lt;/h3&gt;

&lt;p&gt;Specific deliverables, clear growth trajectory. What have you done that other mids at your company couldn‚Äôt? Make that clear.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Clear ownership&lt;/strong&gt;. Proof you‚Äôve lead features end to end. Tell me what you personally did ‚Äî not just what the team delivered.
‚ÄúDelivered frontend for the booking calendar‚Äù is ok.
‚ÄúScoped, implemented and tested a new calendar UX that increased booking rate by 8%‚Äù is much better. Bonus points for a particular challenge you solved on the way.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Growth and initiative&lt;/strong&gt;. Have you taken on increasingly complex challenges? Mentored juniors? Driven cross-team projects? Identified and pushed forward fundamental engineering improvements - eg. to tooling, testing, architecture?&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Some depth, not just breadth&lt;/strong&gt;. By now, you‚Äôve surely had a chance to dive deep on some area (e.g. performance, developer experience, security, analytics). Talk about it.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Narrative coherence&lt;/strong&gt;. Your resume should tell a story of consistent growth. Jumping between too many roles or companies every 6‚Äì12 months can hurt unless it‚Äôs clearly explained.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id="seniors"&gt;Seniors&lt;/h3&gt;

&lt;p&gt;For senior candidates, I‚Äôm looking for engineers who:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Shipped impact, not just code. Eg:&lt;/strong&gt;&lt;br /&gt;
 ‚Ä¢ Reduced lead time for changes from 1.5 hours to 15 minutes by streamlining the CD process, parallelising tests, and removing redundant steps and tests.  &lt;br /&gt;
 ‚Ä¢ Increased conversion by 6% on mobile by redesigning the checkout flow: streamlined payment steps, introduced Apple Pay, and implemented persistent cart recovery.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Show technical leadership&lt;/strong&gt;. Did you rescue a late delivery? Jump on production incidents? Architect a major project?&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Demonstrate influence beyond your team&lt;/strong&gt;. The best seniors make their whole org better. Eg:&lt;br /&gt;
 ‚Ä¢ Improved typical developer onboarding time from 2 days to 1, through improved documentation, docker-based developer infrastructure repo, and driving a ‚Äúship to prod on day 1‚Äù culture.&lt;br /&gt;
 ‚Ä¢ Championed new practices (e.g. observability, testing, documentation culture)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Communicate clearly&lt;/strong&gt;. If your resume is hard to follow, your code and design docs probably are too. A clear, well-structured resume with concrete examples tells me you‚Äôre good at communicating ideas and priorities.&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;Final thoughts&lt;/p&gt;

&lt;p&gt;You don‚Äôt have to tick every box ‚Äî but you should give me something to remember you by. A project, a metric, an impact story, a clear signal of initiative or excellence.&lt;/p&gt;

&lt;p&gt;I reject most resumes in a minute or two. Make yours worth pausing on, and make it easy to say ‚Äúyes‚Äù.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Talk on database indexing</title>
    <link rel="alternate" href="http://blog.url.com/blog/2023/06/13/database-indexing.html"/>
    <id>http://blog.url.com/blog/2023/06/13/database-indexing.html</id>
    <published>2023-06-13T10:00:00+10:00</published>
    <updated>2023-06-15T21:52:22+10:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Great talk on &lt;a href="https://www.youtube.com/watch?v=HubezKbFL7E&amp;amp;amp;t=1732s"&gt;database indexing&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Key points:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;In a multi-column index, order matters&lt;/li&gt;
  &lt;li&gt;All but the final column of an index can only work on exact match&lt;/li&gt;
  &lt;li&gt;Range indexes only work on the final column of an index&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Every New Hire Must Raise the Bar</title>
    <link rel="alternate" href="http://blog.url.com/blog/2021/05/26/some-management-lessons.html"/>
    <id>http://blog.url.com/blog/2021/05/26/some-management-lessons.html</id>
    <published>2021-05-26T10:00:00+10:00</published>
    <updated>2021-06-21T11:58:31+10:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Just a few personal lessons here, recording for my own reference.&lt;/p&gt;

&lt;h2 id="set-an-extremely-high-bar-on-hiring"&gt;Set an extremely high bar on hiring&lt;/h2&gt;

&lt;p&gt;Hiring is the most important thing you do as a manager. And every new hire must raise the bar. They must make the whole team better. This is an &lt;a href="https://www.aboutamazon.com/news/workplace/hire-power-how-amazonians-raise-the-bar-with-every-interview"&gt;Amazon principle&lt;/a&gt;, but it‚Äôs universally applicable.&lt;/p&gt;

&lt;p&gt;If you‚Äôre unsure, pass on the candidate, or add an extra interview step to provide more certainty. Hire only when you‚Äôre very confident that this candidate will be a bar-raiser.&lt;/p&gt;

&lt;p&gt;When a good hire joins, it raises morale and productivity across the whole team. Likewise, a bad hire is a wet blanket on the whole team.&lt;/p&gt;

&lt;h2 id="own-your-bad-hiring-decisions"&gt;Own your bad hiring decisions&lt;/h2&gt;

&lt;p&gt;You‚Äôll make some. Hopefully not many, if your bar is high enough. But when you do, own it. They must be given direct, specific feedback, very quickly. If they can‚Äôt turn around quickly, you must let them go within their probation period. The question to ask, regularly throughout the probation, is ‚Äúif I could just re-wind time, would I hire them again?‚Äù If the answer‚Äôs no, they can‚Äôt pass probation.&lt;/p&gt;

&lt;p&gt;Letting someone go sux for everyone - you, your team, and most of all, the person being fired. If you‚Äôre doing it more than ‚Äúvery rarely‚Äù, it means your hiring bar isn‚Äôt high enough. You still must do it! But raise your bar to prevent it in future.&lt;/p&gt;

&lt;h2 id="create-a-strong-feedback-culture"&gt;Create a strong feedback culture&lt;/h2&gt;

&lt;p&gt;Not just for new hires, but for everyone. If a manager has negative feedback for a report, it must be delivered quickly. Don‚Äôt wait for next performance review. And usually, don‚Äôt wait for next 1:1. The feedback must be direct, specific, empathetic, and framed in the best way to allow the report to quickly change and grow.&lt;/p&gt;

&lt;p&gt;You must lead by example on delivering feedback to this standard; culture filters down from the top. It‚Äôs scary at first, but most people - either immediately, or at least later upon reflection - appreciate the honesty and opportunity to improve.&lt;/p&gt;

&lt;p&gt;Likewise, positive feedback is easy to forget about (if everything‚Äôs going well, no need for feedback, right?). But it‚Äôs equally important. Positive feedback must be specific and heartfelt. ‚ÄúYou‚Äôre doing a great job‚Äù isn‚Äôt good enough - what exact thing are they doing well, and what good outcome is it creating? Why do you truly appreciate them doing it? Let them know - and usually, do it in a public channel so they know the team is aware of their effort, and so the team knows what ‚Äúdoing a great job‚Äù looks like to you.&lt;/p&gt;

</content>
  </entry>
  <entry>
    <title>Hiring Offshore</title>
    <link rel="alternate" href="http://blog.url.com/blog/2021/05/26/hiring-offshore.html"/>
    <id>http://blog.url.com/blog/2021/05/26/hiring-offshore.html</id>
    <published>2021-05-26T10:00:00+10:00</published>
    <updated>2021-05-26T20:25:35+10:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Though most of our engineers are based in Australia, at work we‚Äôve now got teams in Ukraine, Sri Lanka, India, and Brazil. Here‚Äôs some tips.&lt;/p&gt;

&lt;h2 id="dont-lower-your-bar"&gt;Don‚Äôt lower your bar&lt;/h2&gt;

&lt;p&gt;If you wouldn‚Äôt hire them for full price at on-shore rates, don‚Äôt hire them off-shore just because they‚Äôre cheaper. Sub-par developers are a drain on the entire team, and not worth having at any cost. Be willing to pay a bit extra to get the best developers overseas, just like you would, here.&lt;/p&gt;

&lt;p&gt;We‚Äôre using an agency, so applicants come to us already pre-vetted. Still, we interview them again and turn down a majority. Finding pre-vetted candidates, then vetting again yourself, is the right approach.&lt;/p&gt;

&lt;h2 id="communication-is-as-important-as-technical-ability"&gt;Communication is as important as technical ability&lt;/h2&gt;

&lt;p&gt;You absolutely must be able to communicate easily, both in writing and over the phone. No amount of programming expertise changes this. This means that your off-shore hires must be great at English, or they must be managed by an on-shore team member who speaks their language fluently.&lt;/p&gt;

&lt;h2 id="over-do-communication-early-on"&gt;Over-do communication early on&lt;/h2&gt;

&lt;p&gt;Anecdotally, I‚Äôve noticed off-shore developers being reluctant to ask for help, and reluctant to take help even when it‚Äôs offered. Insist on pair-programming with new off-shore starters for at least a couple of hours a day, every day, by default as they start off. Let go gradually as it‚Äôs clear they have a firm grip of the wheel. Emphasise how useful it was, and encourage them to reach out for help whenever needed. Even if they‚Äôre not reaching out for help, pro-actively reach out&lt;/p&gt;

&lt;h2 id="encourage-autonomy-and-push-back"&gt;Encourage autonomy and push-back&lt;/h2&gt;

&lt;p&gt;Off-shore hires tend to do whatever they‚Äôre asked, with little or no push back. But you don‚Äôt want that! Emphasise that you might be wrong, that they can question or challenge your advice. Praise it when they do. It‚Äôs a waste of their intelligence to be merely a pencil in your hand.&lt;/p&gt;

&lt;h2 id="be-patient"&gt;Be patient&lt;/h2&gt;

&lt;p&gt;If you‚Äôre not finding great hires, keep looking. Among the billion people in India, there‚Äôs exactly zero chance that there‚Äôs not thousands and thousands of great programmers. Yes, we‚Äôve all heard the bad stories. Those people didn‚Äôt have their hiring bar high enough.&lt;/p&gt;

&lt;h2 id="treat-them-as-first-class-citizens-of-the-team"&gt;Treat them as first class citizens of the team&lt;/h2&gt;

&lt;p&gt;Because they‚Äôre cheaper, because they‚Äôre not permanent / direct employees, and because they &lt;em&gt;feel&lt;/em&gt; further removed, it‚Äôs tempting to give off-shore hires second-class service as a manager. ‚ÄúI know they‚Äôre blocked‚Ä¶ but I‚Äôm busy, I‚Äôll get to it in a few hours‚Äù or ‚ÄúDoesn‚Äôt matter if it takes twice as long; they‚Äôre half the cost anyway‚Äù.&lt;/p&gt;

&lt;p&gt;Don‚Äôt. Apart from being a shitty thing to do, there‚Äôs a big opportunity cost in leaving good developers un-supported. As much as reasonable, give your off-shore teams the same level of support and service as your on-shore teams.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Breaking Prod</title>
    <link rel="alternate" href="http://blog.url.com/blog/2018/07/27/breaking-prod.html"/>
    <id>http://blog.url.com/blog/2018/07/27/breaking-prod.html</id>
    <published>2018-07-27T10:00:00+10:00</published>
    <updated>2021-06-21T11:51:56+10:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;When broken production apps break, stakeholders immediately ask: &lt;em&gt;‚ÄúWhat can we do to ensure this never happens again?‚Äù&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The relationship between development speed and bugs looks something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src="../../../../images/bugs-vs-speed-f15f9700.jpg" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Rushed pace &amp;amp; poor testing means many bugs. Slow down (ie, be more thorough), and at first you‚Äôll drastically reduce bugs. But slow down more, and you begin to bottom out. You can never reach zero.&lt;/p&gt;

&lt;p&gt;Breaking prod less means using time, money, and bureaucracy to slide right on an axis of diminishing returns.&lt;/p&gt;

&lt;p&gt;Finding the sweet spot requires ongoing collaboration between business and tech. Since sliding RIGHT is expensive, you want to be as far LEFT as your appetite for risk allows.&lt;/p&gt;

&lt;p&gt;Writing pacemaker firmware? Slide very far right to ensure no one dies.&lt;/p&gt;

&lt;p&gt;Selling shoes online? You have a higher tolerance for risk. Slide left and &lt;em&gt;take advantage of it.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Coming back to the original question, the answer is &lt;em&gt;‚Äúwe can slide as far right as you want, but it‚Äôs not free‚Ä¶ how much do you want to pay for it?‚Äù&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;Update:&lt;/em&gt; What &lt;em&gt;is&lt;/em&gt; important is to look for opportunities to efficiently decrease the risk of bugs. People‚Äôs knee-jerk reaction to ‚Äúprod is broken!‚Äù is to ramp up bureacracy with generic solutions like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ensure every PR has 2 reviews, not 1!&lt;/li&gt;
  &lt;li&gt;Do a second round of testing before promoting to prod!&lt;/li&gt;
  &lt;li&gt;etc&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These make you feel like you‚Äôve ‚Äúdone something about it‚Äù but you haven‚Äôt. They slow the team down and don‚Äôt really reduce risk. Instead, look for specific, low bureaucracy process changes that target high risk scenarios. Example:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If someone posts in the #support slack channel after business hours, auto-respond with instructions on how to alert the on-call staff.&lt;/li&gt;
  &lt;li&gt;When releasing a significant feature outside of business hours, document a rollback plan and communicate it with on-call staff&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Data imports done right</title>
    <link rel="alternate" href="http://blog.url.com/blog/2016/12/22/data-imports-done-right.html"/>
    <id>http://blog.url.com/blog/2016/12/22/data-imports-done-right.html</id>
    <published>2016-12-22T11:00:00+11:00</published>
    <updated>2021-05-26T19:06:31+10:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;I‚Äôve been bitten more than once by data imports consuming an unreasonable amount of time in software projects. Here are some lessons.&lt;/p&gt;

&lt;h2 id="know-what-to-expect"&gt;Know what to expect&lt;/h2&gt;

&lt;p&gt;The client (or whoever is sourcing the data) will give you poor quality data from disparate sources, and they‚Äôll drip-feed it over a period of way-too-long. Each version will be in a slightly different format. They‚Äôll say ‚Äújust get started with this‚Äù then want a complete re-do with fresh data later. They‚Äôll give you the final copy, then the actual final copy, then the final FINAL copy. Eventually, you‚Äôll get the real actual final renamed FINAL CONFIRMED copy. A few months after going live, they‚Äôll want to import a bit more data that they forgot about the first time round. Expect this.&lt;/p&gt;

&lt;p&gt;You will end up running your import scripts countless times, with dozens of variations in the data format supplied by the client.&lt;/p&gt;

&lt;h2 id="know-how-to-deal-with-it"&gt;Know how to deal with it&lt;/h2&gt;

&lt;h3 id="your-import-scripts-should-be-production-level-code"&gt;Your import scripts should be production level code&lt;/h3&gt;

&lt;p&gt;You and your team will run them enough to make this MORE than worth it. Write unit tests. Have tests for each edge case. Name them well. Where there‚Äôs cheap performance wins, take them. Commit them to the codebase with the expectation that they‚Äôll live there for several months, minimum, and be used countless times.&lt;/p&gt;

&lt;h3 id="your-import-scripts-should-be-easily-re-runnable"&gt;Your import scripts should be easily re-runnable&lt;/h3&gt;

&lt;p&gt;You should be able to re-run them with a single command ‚Äî ./import.sh or whatever. You should not have to manually delete or otherwise wrangle around with data in the database, or csv files, or anything else, before re-running.&lt;/p&gt;

&lt;p&gt;Your import scripts should take care of either: deleting all data before they re-run, or running in an idempotent kinda way so on the second run through, they‚Äôll update the same existing record if it exists, rather than adding a duplicate.&lt;/p&gt;

&lt;h2 id="your-app-primarily-your-database-schema-should-dictate-the-data-format-for-imports"&gt;Your app (primarily your database schema) should dictate the data format for imports&lt;/h2&gt;

&lt;p&gt;When the client gives you a messy spreadsheet, it‚Äôs easy to think: ‚ÄúThat‚Äôs Ok, I‚Äôll write script that loops over this, untangles it, and imports it directly to the database‚Äù.&lt;/p&gt;

&lt;p&gt;Don‚Äôt do this. Don‚Äôt let the mess of spreadsheets you‚Äôre provided with dictate the data formats used by your import scripts. Imagine if the app was in production and the client wanted a page where they could upload a CSV of additional data at any time, and expect to get understandable errors when data didn‚Äôt match the expected format. You‚Äôd have to dictate the format of the CSV. What would you ideally dictate? That‚Äôs the format your inport scripts should use.&lt;/p&gt;

&lt;p&gt;This requires a little more thought and effort up front on your part, but it pays back in the long run.&lt;/p&gt;

&lt;p&gt;If you have to deal with a dirty spreadsheet of data, the approach should be to write a (possibly dirty, throw-away) script to transform that data into the format your app expects (ie, a format closely matching your app‚Äôs database schema), then import the transformed data using your nice, production quality code.&lt;/p&gt;

&lt;p&gt;Alternatively, don‚Äôt write script to transform messy data, and just tell the client: ‚ÄúThis data isn‚Äôt in a suitable format. Here‚Äôs a template CSV with the headers we expect. Fill that out and send it back‚Äù.&lt;/p&gt;

&lt;h3 id="you-mostly-want-one-import-per-table-as-the-database-schema-changes-modify-existing-scripts-dont-add-new-ones"&gt;You mostly want one import per table. As the database schema changes, modify existing scripts; don‚Äôt add new ones.&lt;/h3&gt;

&lt;p&gt;Let‚Äôs say a client wants to give you data about restaurants. They have the restaurant names now ‚Äî but will give you the addresses later. So, create a restaurants import script that handles just names now. Later, modify that same script to handle both names and addresses. Don‚Äôt create a second restaurant_addresses import script later. One script per table, modify it as the schema for that table changes.&lt;/p&gt;

&lt;p&gt;Ideally, when the client says ‚ÄúI have the addresses data now‚Äù, you say ‚Äúgreat ‚Äî add it to this spreadsheet which already contains the names, and empty columns for the address data, then send that spreadsheet back to me‚Äù. Of course, since your expected CSV format closely matches your database schema, it‚Äôll be easy to export a CSV of existing data using your favourite RDBMS client.&lt;/p&gt;

&lt;h3 id="know-whos-responsible-for-providing-clean-data"&gt;Know who‚Äôs responsible for providing clean data&lt;/h3&gt;

&lt;p&gt;In almost all cases, the ultimate responsibility of providing clean data (or cleaning up bad data) should lie with the client. That should be clear in writing prior to starting the job.&lt;/p&gt;

&lt;p&gt;Ideally, the job of getting that clean data into the most convenient format for your app should also lie with the client ‚Äî that is, you should be able to say ‚Äúhere‚Äôs how the app‚Äôs import scripts expect the data to look‚Äù, and they‚Äôll provide you data looking like that.&lt;/p&gt;

&lt;p&gt;Both the above steps (getting clean data, and formatting it) ALWAYS take WAY longer than expected. So avoid those responsibilities if you can.&lt;/p&gt;

&lt;p&gt;Of course, in practice, you‚Äôll cut the client some slack and sometimes tidy up data for them. But having it clear in writing that cleaning and formatting data is their responsibility means after the 20th iteration of being provided unsuitable data, you can say ‚ÄúStop! Get us clean data, and then we‚Äôll continue. Or, pay us extra for cleaning up dirty data, because that work is outside scope.‚Äù&lt;/p&gt;

&lt;h3 id="dont-be-too-preoccupied-with-getting-real-data-in-your-app-early-on"&gt;Don‚Äôt be too preoccupied with getting ‚Äúreal‚Äù data in your app early on&lt;/h3&gt;

&lt;p&gt;It‚Äôs tempting to jump the gun and get ‚Äúreal‚Äù data in your app to make your dev or staging environment feel more complete or realistic, even when the data you‚Äôve been provided so far is a messy, inconsistent or incomplete. Avoid this temptation.&lt;/p&gt;

&lt;p&gt;The danger here is that every time you find a bug in the app, you‚Äôre never sure wether it‚Äôs a result of bad code, or bad data. Sticking to a smaller subset of ‚Äúnon-real‚Äù but clean, correct, consistent data ensures that when you do have a bug, you can be a lot more confident that the codebase, not the database, is where you should be trying to fix it.&lt;/p&gt;

&lt;p&gt;Always make every effort to avoid having any inconsistent / incomplete data, even in the early stages of development / prototyping.&lt;/p&gt;

&lt;p&gt;Maintain a small but complete and consistent subset of data that you can use for development, until ALL of the real data becomes available.&lt;/p&gt;

&lt;h2 id="overestimate"&gt;Overestimate&lt;/h2&gt;

&lt;p&gt;Often the advice for estimating software projects is ‚Äúdecide how long you think it‚Äôll take, then double it‚Äù. For data imports, multiplying by 4, or negotiating to do that part of the project hourly rather than fixed cost, is a safer bet.&lt;/p&gt;
</content>
  </entry>
</feed>


    <!-- Footer -->
    <footer>
      <nav>
        <a class="" href="/">Blog</a>
        &nbsp;&bull;&nbsp;
        <a class="" href="/about.html">About</a>
        &nbsp;&bull;&nbsp;
        <a class="" href="/resume.html">Resume</a>
        &nbsp;&bull;&nbsp;
        <a href="feed.xml">RSS</a>
        &nbsp;&bull;&nbsp;
        <a class="" href="/archives.html">Archives</a>
      </nav>
      <div class="row">
        <div class="col-lg-12">
          <p>Copyright &copy; Joshua Paling 2015</p>
        </div>
      </div>
      <!-- /.row -->
    </footer>

  </div>

</body>
</html>

