
<!doctype html>
<html>
<head>
  <meta charset="utf-8" />
  <meta http-equiv='X-UA-Compatible' content='IE=edge;chrome=1' />
  <title>Joshua Paling </title>
  <link rel="alternate" type="application/atom+xml" title="Atom Feed" href="/feed.xml" />
  <link href="/stylesheets/application-65eac6ab.css" rel="stylesheet" />
  <script src="/javascripts/application-8d565278.js"></script>
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
</head>
<body>
  <div class="page-wrapper">
    <header>
      <h1>Joshua Paling</h1>
      <nav>
        <a class="" href="/">Blog</a>
        <a class="" href="/about.html">About</a>
        <a class="" href="/resume.html">Resume</a>
        <a href="feed.xml">RSS</a>
        <a target="_blank" href="https://twitter.com/joshuapaling">@joshuapaling</a>
      </nav>
    </header>


<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Joshua Paling</title>
  <subtitle>Joshua Paling</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2021-05-26T00:00:00Z</updated>
  <author>
    <name>Joshua Paling</name>
  </author>
  <entry>
    <title>Some Management Lessons</title>
    <link rel="alternate" href="http://blog.url.com/blog/2021/05/26/some-management-lessons.html"/>
    <id>http://blog.url.com/blog/2021/05/26/some-management-lessons.html</id>
    <published>2021-05-26T00:00:00Z</published>
    <updated>2021-05-26T21:00:58+10:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Just a few personal lessons here, recording for my own reference. They're not things I &lt;em&gt;didn't know&lt;/em&gt; before, but they've been hammered home strongly the past few months.&lt;/p&gt;

&lt;h2 id="set-an-extremely-high-bar-on-hiring"&gt;Set an extremely high bar on hiring&lt;/h2&gt;

&lt;p&gt;Hiring is the most important thing you do as a manager. And every new hire must raise the bar. This is an &lt;a href="https://www.aboutamazon.com/news/workplace/hire-power-how-amazonians-raise-the-bar-with-every-interview"&gt;Amazon principle&lt;/a&gt;, but it's universally applicable.&lt;/p&gt;

&lt;p&gt;If you're unsure, pass on the candidate, or add an extra interview step to provide more certainty. Hire only when you're very confident that this candidate will be a bar-raiser.&lt;/p&gt;

&lt;p&gt;When a good hire joins, it raises morale and productivity across the whole team. Likewise, a bad hire is a wet blanket on the whole team.&lt;/p&gt;

&lt;h2 id="own-your-bad-hiring-decisions"&gt;Own your bad hiring decisions&lt;/h2&gt;

&lt;p&gt;You'll make some. Hopefully not many, if your bar is high enough. But when you do, own it. They must be given direct, specific feedback, very quickly. If they can't turn around quickly, you must let them go within their probation period. The question to ask, regularly throughout the probation, is "if I could just re-wind time, would I hire them again?" If the answer's no, they can't pass probation.&lt;/p&gt;

&lt;p&gt;Letting someone go sux for everyone - you, your team, and most of all, the person being fired. If you're doing it more than "very rarely", it means your hiring bar isn't high enough. You still must do it! But raise your bar to prevent it in future.&lt;/p&gt;

&lt;h2 id="create-a-strong-feedback-culture"&gt;Create a strong feedback culture&lt;/h2&gt;

&lt;p&gt;Not just for new hires, but for everyone. If a manager has negative feedback for a report, it must be delivered quickly. Don't wait for next performance review. And usually, don't wait for next 1:1. The feedback must be direct, specific, empathetic, and framed in the best way to allow the report to quickly change and grow.&lt;/p&gt;

&lt;p&gt;You must lead by example on delivering feedback to this standard; culture filters down from the top. It's scary at first, but most people - either immediately, or at least later upon reflection - appreciate the honesty and opportunity to improve.&lt;/p&gt;

&lt;p&gt;Likewise, positive feedback is easy to forget about (if everything's going well, no need for feedback, right?). But it's equally important. Positive feedback must be specific and heartfelt. "You're doing a great job" isn't good enough - what exact thing are they doing well, and what good outcome is it creating? Why do you truly appreciate them doing it? Let them know - and usually, do it in a public channel so they know the team is aware of their effort, and so the team knows what "doing a great job" looks like to you.&lt;/p&gt;

</content>
  </entry>
  <entry>
    <title>Hiring Offshore</title>
    <link rel="alternate" href="http://blog.url.com/blog/2021/05/26/hiring-offshore.html"/>
    <id>http://blog.url.com/blog/2021/05/26/hiring-offshore.html</id>
    <published>2021-05-26T00:00:00Z</published>
    <updated>2021-05-26T20:25:35+10:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Though most of our engineers are based in Australia, at work we've now got teams in Ukraine, Sri Lanka, India, and Brazil. Here's some tips.&lt;/p&gt;

&lt;h2 id="dont-lower-your-bar"&gt;Don't lower your bar&lt;/h2&gt;

&lt;p&gt;If you wouldn't hire them for full price at on-shore rates, don't hire them off-shore just because they're cheaper. Sub-par developers are a drain on the entire team, and not worth having at any cost. Be willing to pay a bit extra to get the best developers overseas, just like you would, here.&lt;/p&gt;

&lt;p&gt;We're using an agency, so applicants come to us already pre-vetted. Still, we interview them again and turn down a majority. Finding pre-vetted candidates, then vetting again yourself, is the right approach.&lt;/p&gt;

&lt;h2 id="communication-is-as-important-as-technical-ability"&gt;Communication is as important as technical ability&lt;/h2&gt;

&lt;p&gt;You absolutely must be able to communicate easily, both in writing and over the phone. No amount of programming expertise changes this. This means that your off-shore hires must be great at English, or they must be managed by an on-shore team member who speaks their language fluently.&lt;/p&gt;

&lt;h2 id="over-do-communication-early-on"&gt;Over-do communication early on&lt;/h2&gt;

&lt;p&gt;Anecdotally, I've noticed off-shore developers being reluctant to ask for help, and reluctant to take help even when it's offered. Insist on pair-programming with new off-shore starters for at least a couple of hours a day, every day, by default as they start off. Let go gradually as it's clear they have a firm grip of the wheel. Emphasise how useful it was, and encourage them to reach out for help whenever needed. Even if they're not reaching out for help, pro-actively reach out&lt;/p&gt;

&lt;h2 id="encourage-autonomy-and-push-back"&gt;Encourage autonomy and push-back&lt;/h2&gt;

&lt;p&gt;Off-shore hires tend to do whatever they're asked, with little or no push back. But you don't want that! Emphasise that you might be wrong, that they can question or challenge your advice. Praise it when they do. It's a waste of their intelligence to be merely a pencil in your hand.&lt;/p&gt;

&lt;h2 id="be-patient"&gt;Be patient&lt;/h2&gt;

&lt;p&gt;If you're not finding great hires, keep looking. Among the billion people in India, there's exactly zero chance that there's not thousands and thousands of great programmers. Yes, we've all heard the bad stories. Those people didn't have their hiring bar high enough.&lt;/p&gt;

&lt;h2 id="treat-them-as-first-class-citizens-of-the-team"&gt;Treat them as first class citizens of the team&lt;/h2&gt;

&lt;p&gt;Because they're cheaper, because they're not permanent / direct employees, and because they &lt;em&gt;feel&lt;/em&gt; further removed, it's tempting to give off-shore hires second-class service as a manager. "I know they're blocked… but I'm busy, I'll get to it in a few hours" or "Doesn't matter if it takes twice as long; they're half the cost anyway".&lt;/p&gt;

&lt;p&gt;Don't. Apart from being a shitty thing to do, there's a big opportunity cost in leaving good developers un-supported. As much as reasonable, give your off-shore teams the same level of support and service as your on-shore teams.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Breaking Prod</title>
    <link rel="alternate" href="http://blog.url.com/blog/2018/07/27/breaking-prod.html"/>
    <id>http://blog.url.com/blog/2018/07/27/breaking-prod.html</id>
    <published>2018-07-27T00:00:00Z</published>
    <updated>2021-05-26T19:26:16+10:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;When I’ve broken production apps, stakeholders have often asked: &lt;em&gt;“What can we do to ensure this doesn’t happen again?”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="../../../../images/bugs-vs-speed-f15f9700.jpg" alt="Bugs vs speed" /&gt;&lt;/p&gt;

&lt;p&gt;The relationship between development speed and bugs looks something like this:&lt;/p&gt;

&lt;p&gt;As you slow development speed, the impact of bugs does not decrease linearly&lt;/p&gt;

&lt;p&gt;Rushed pace &amp;amp; poor testing means many bugs. Slow down, and at first you’ll drastically reduce bugs. But slow down more, and you begin to bottom out. You can never reach zero.&lt;/p&gt;

&lt;p&gt;Breaking prod less means using time, money, and bureaucracy to slide right on an axis of diminishing returns.&lt;/p&gt;

&lt;p&gt;Finding the sweet spot requires ongoing collaboration between business and tech. Since sliding RIGHT is expensive, you want to be as far LEFT as your appetite for risk allows.&lt;/p&gt;

&lt;p&gt;Writing pacemaker firmware? Slide very far right to ensure no one dies.&lt;/p&gt;

&lt;p&gt;Selling shoes online? You have a higher tolerance for risk. Slide left and &lt;em&gt;take advantage of it.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Coming back to the original question, the answer is &lt;em&gt;“we can slide as far right as you want, but it’s not free… how much do you want to pay for it?”&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Data imports done right</title>
    <link rel="alternate" href="http://blog.url.com/blog/2016/12/22/data-imports-done-right.html"/>
    <id>http://blog.url.com/blog/2016/12/22/data-imports-done-right.html</id>
    <published>2016-12-22T00:00:00Z</published>
    <updated>2021-05-26T19:06:31+10:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;I’ve been bitten more than once by data imports consuming an unreasonable amount of time in software projects. Here are some lessons.&lt;/p&gt;

&lt;h2 id="know-what-to-expect"&gt;Know what to expect&lt;/h2&gt;

&lt;p&gt;The client (or whoever is sourcing the data) will give you poor quality data from disparate sources, and they’ll drip-feed it over a period of way-too-long. Each version will be in a slightly different format. They’ll say “just get started with this” then want a complete re-do with fresh data later. They’ll give you the final copy, then the actual final copy, then the final FINAL copy. Eventually, you’ll get the real actual final renamed FINAL CONFIRMED copy. A few months after going live, they’ll want to import a bit more data that they forgot about the first time round. Expect this.&lt;/p&gt;

&lt;p&gt;You will end up running your import scripts countless times, with dozens of variations in the data format supplied by the client.&lt;/p&gt;

&lt;h2 id="know-how-to-deal-with-it"&gt;Know how to deal with it&lt;/h2&gt;

&lt;h3 id="your-import-scripts-should-be-production-level-code"&gt;Your import scripts should be production level code&lt;/h3&gt;

&lt;p&gt;You and your team will run them enough to make this MORE than worth it. Write unit tests. Have tests for each edge case. Name them well. Where there’s cheap performance wins, take them. Commit them to the codebase with the expectation that they’ll live there for several months, minimum, and be used countless times.&lt;/p&gt;

&lt;h3 id="your-import-scripts-should-be-easily-re-runnable"&gt;Your import scripts should be easily re-runnable&lt;/h3&gt;

&lt;p&gt;You should be able to re-run them with a single command — ./import.sh or whatever. You should not have to manually delete or otherwise wrangle around with data in the database, or csv files, or anything else, before re-running.&lt;/p&gt;

&lt;p&gt;Your import scripts should take care of either: deleting all data before they re-run, or running in an idempotent kinda way so on the second run through, they’ll update the same existing record if it exists, rather than adding a duplicate.&lt;/p&gt;

&lt;h2 id="your-app-primarily-your-database-schema-should-dictate-the-data-format-for-imports"&gt;Your app (primarily your database schema) should dictate the data format for imports&lt;/h2&gt;

&lt;p&gt;When the client gives you a messy spreadsheet, it’s easy to think: “That’s Ok, I’ll write script that loops over this, untangles it, and imports it directly to the database”.&lt;/p&gt;

&lt;p&gt;Don’t do this. Don’t let the mess of spreadsheets you’re provided with dictate the data formats used by your import scripts. Imagine if the app was in production and the client wanted a page where they could upload a CSV of additional data at any time, and expect to get understandable errors when data didn’t match the expected format. You’d have to dictate the format of the CSV. What would you ideally dictate? That’s the format your inport scripts should use.&lt;/p&gt;

&lt;p&gt;This requires a little more thought and effort up front on your part, but it pays back in the long run.&lt;/p&gt;

&lt;p&gt;If you have to deal with a dirty spreadsheet of data, the approach should be to write a (possibly dirty, throw-away) script to transform that data into the format your app expects (ie, a format closely matching your app’s database schema), then import the transformed data using your nice, production quality code.&lt;/p&gt;

&lt;p&gt;Alternatively, don’t write script to transform messy data, and just tell the client: “This data isn’t in a suitable format. Here’s a template CSV with the headers we expect. Fill that out and send it back”.&lt;/p&gt;

&lt;h3 id="you-mostly-want-one-import-per-table-as-the-database-schema-changes-modify-existing-scripts-dont-add-new-ones"&gt;You mostly want one import per table. As the database schema changes, modify existing scripts; don’t add new ones.&lt;/h3&gt;

&lt;p&gt;Let’s say a client wants to give you data about restaurants. They have the restaurant names now — but will give you the addresses later. So, create a restaurants import script that handles just names now. Later, modify that same script to handle both names and addresses. Don’t create a second restaurant_addresses import script later. One script per table, modify it as the schema for that table changes.&lt;/p&gt;

&lt;p&gt;Ideally, when the client says “I have the addresses data now”, you say “great — add it to this spreadsheet which already contains the names, and empty columns for the address data, then send that spreadsheet back to me”. Of course, since your expected CSV format closely matches your database schema, it’ll be easy to export a CSV of existing data using your favourite RDBMS client.&lt;/p&gt;

&lt;h3 id="know-whos-responsible-for-providing-clean-data"&gt;Know who’s responsible for providing clean data&lt;/h3&gt;

&lt;p&gt;In almost all cases, the ultimate responsibility of providing clean data (or cleaning up bad data) should lie with the client. That should be clear in writing prior to starting the job.&lt;/p&gt;

&lt;p&gt;Ideally, the job of getting that clean data into the most convenient format for your app should also lie with the client — that is, you should be able to say “here’s how the app’s import scripts expect the data to look”, and they’ll provide you data looking like that.&lt;/p&gt;

&lt;p&gt;Both the above steps (getting clean data, and formatting it) ALWAYS take WAY longer than expected. So avoid those responsibilities if you can.&lt;/p&gt;

&lt;p&gt;Of course, in practice, you’ll cut the client some slack and sometimes tidy up data for them. But having it clear in writing that cleaning and formatting data is their responsibility means after the 20th iteration of being provided unsuitable data, you can say “Stop! Get us clean data, and then we’ll continue. Or, pay us extra for cleaning up dirty data, because that work is outside scope.”&lt;/p&gt;

&lt;h3 id="dont-be-too-preoccupied-with-getting-real-data-in-your-app-early-on"&gt;Don’t be too preoccupied with getting “real” data in your app early on&lt;/h3&gt;

&lt;p&gt;It’s tempting to jump the gun and get “real” data in your app to make your dev or staging environment feel more complete or realistic, even when the data you’ve been provided so far is a messy, inconsistent or incomplete. Avoid this temptation.&lt;/p&gt;

&lt;p&gt;The danger here is that every time you find a bug in the app, you’re never sure wether it’s a result of bad code, or bad data. Sticking to a smaller subset of “non-real” but clean, correct, consistent data ensures that when you do have a bug, you can be a lot more confident that the codebase, not the database, is where you should be trying to fix it.&lt;/p&gt;

&lt;p&gt;Always make every effort to avoid having any inconsistent / incomplete data, even in the early stages of development / prototyping.&lt;/p&gt;

&lt;p&gt;Maintain a small but complete and consistent subset of data that you can use for development, until ALL of the real data becomes available.&lt;/p&gt;

&lt;h2 id="overestimate"&gt;Overestimate&lt;/h2&gt;

&lt;p&gt;Often the advice for estimating software projects is “decide how long you think it’ll take, then double it”. For data imports, multiplying by 4, or negotiating to do that part of the project hourly rather than fixed cost, is a safer bet.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>How to make fixed price work</title>
    <link rel="alternate" href="http://blog.url.com/blog/2016/10/14/how-to-make-fixed-price-work.html"/>
    <id>http://blog.url.com/blog/2016/10/14/how-to-make-fixed-price-work.html</id>
    <published>2016-10-14T00:00:00Z</published>
    <updated>2021-05-26T19:22:31+10:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Customers want fixed price. Here’s how to make it a fair deal for yourself.
I recently read &lt;a href="https://twitter.com/arohner/status/766688027745751041"&gt;this tweet-storm&lt;/a&gt;, on why you should never take fixed price contracts.&lt;/p&gt;

&lt;p&gt;It says:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Unless you’ve done the job 20 times, and can estimate how long it will take with a high-degree of certainty, fixed-price is suboptimal. Like the over-under in betting, someone wins, and someone loses. And to answer who is more likely to win, the contractor or the employer, you can answer with another question: When was the last time you had a software project come in on-schedule? For clarity, fixed duration contracts are fine: “You pay for N weeks of work, I do N weeks of work”. Where you get into trouble is: “I pay for N weeks of work, regardless of how much time it takes to complete”. The employers who do this tend to also like to play games with what is in vs. out of scope. Avoid.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Having spent years in a small digital agency where &amp;gt; 95% of our work was fixed price, I agree with all the points. The problem is, almost all customers want a fixed price.&lt;/p&gt;

&lt;p&gt;Here’s some tips for making fixed price work.&lt;/p&gt;

&lt;h2 id="fixed-price-is-insurance"&gt;Fixed price is insurance&lt;/h2&gt;

&lt;p&gt;This is the golden rule. In a fixed price job, you’re selling the customer two things:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The product you’re building them&lt;/li&gt;
  &lt;li&gt;Insurance on the cost of that product&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Insurance costs money.&lt;/strong&gt; In the case of software, you should charge \~30% additional for fixed price jobs. You can tell the client this in plain english. They will still want fixed cost for the same reasons they still buy travel/car/indemnity insurance.&lt;/p&gt;

&lt;p&gt;Companies selling insurance (ie, you):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Don’t win on every single customer. They win overall.&lt;/li&gt;
  &lt;li&gt;Have different premiums for different customers, based on risk.&lt;/li&gt;
  &lt;li&gt;Have strict written terms on what is and isn’t inside the scope of the insurance policy.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id="estimating"&gt;Estimating&lt;/h2&gt;

&lt;p&gt;You’ll drastically underestimate your first few projects. Don’t underestimate the next few. Here’s some tips:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Hofstadtler’s law states “It always takes longer than you expect, even when you take into account Hofstadter’s Law.” This is doubly true of software.&lt;/li&gt;
  &lt;li&gt;Break the work into small chunks, estimate each, then total.&lt;br /&gt; You’ll want to break the project into chunks for writing your scope too. More on that later.&lt;/li&gt;
  &lt;li&gt;Scope will change. The client doesn’t know what they want yet. You’ll write a formal scope to protect you against scope change, but asking for more money at every tiny change sucks. Allow a significant amount of fat so you can absorb some reasonable amount of scope change.&lt;/li&gt;
  &lt;li&gt;Consider the value of the job to the client. Is it a game changer for them? If so, charge more.&lt;/li&gt;
  &lt;li&gt;Got your estimate? Now, Double it. Everything takes twice as long as you think.&lt;br /&gt;
&lt;em&gt;And DON’T consider the fact that it’ll get doubled when going through the points above!&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id="wont-i-be-out-competed-on-price"&gt;Won’t I be out-competed on price?&lt;/h2&gt;

&lt;p&gt;Companies who get a few quotes on a job will get figures all over the place. Not everyone’s shopping for the cheapest price, and regardless of your price point, you’ll have people turning you down for being too expensive, and others turning you down for being too cheap. Yes, really.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You want to go for the clients who know cheapest isn’t best.&lt;/em&gt; Not only do they pay more, they’re also usually more professional, less petty, and much more enjoyable to work with.&lt;/p&gt;

&lt;h2 id="writing-a-scope"&gt;Writing a scope&lt;/h2&gt;

&lt;p&gt;For a significant sized job, you should write a scope and have clients read and sign it before commencing work. Most clients won’t actually read it, but do it anyway.&lt;/p&gt;

&lt;p&gt;A scope should detail what you will complete under the fixed cost. It should also outline what you won’t complete. You can place this under a euphemism like “Future Considerations”, and mention that these are ideas / possible enhancements for future, not included under the current scope.&lt;/p&gt;

&lt;p&gt;A scope is what you’ll fall back on when your client says “… but I wanted this from the beginning” and you say “it wasn’t mentioned in the scope — we can do it, but at additional cost”. Assuming you’re being fair and telling the truth, clients will usually accept that without much fuss.&lt;/p&gt;

&lt;p&gt;A scope is also what you’ll fall back on, on the off chance things get much worse than that. A scope is like writing the terms for the insurance you’re offering. Insurance companies don’t say “sure, we’ll cover any unexpected expenses you have on your holiday, no questions asked!”&lt;/p&gt;

&lt;h2 id="payment"&gt;Payment&lt;/h2&gt;

&lt;p&gt;It’s hard, but if you can, charge some amount to prepare a scope. One way to pitch it is “it comes of the cost of the job if you go ahead with us”. Companies can, and will, get you to write a great scope, then take your scope out to tender with cheaper companies that would not have done half as good a job of scoping out their project. A good scope is worth money in its own right.&lt;/p&gt;

&lt;p&gt;Take a deposit up front. For smaller jobs (say up to 20k), take 50% up front, as soon as the scope is signed. For larger jobs, break it into milestones as makes sense, but the first payment should be up front, before starting work.&lt;/p&gt;

&lt;p&gt;The last payment should be prior to going live — as in “it’s in staging and we’re ready to flick the go live switch once you pay”. Even if you trust the client, invoices get paid much more slowly after the project is live! (If the client resists, you may hold back some nominal amount to bill after it’s gone live, but 90% + should be before.)
Most importantly, watch Mike Montiero’s great talk &lt;a href="https://www.youtube.com/watch?v=jVkLVRt6c1U"&gt;“Fuck you, pay me”&lt;/a&gt;. I can’t say I follow all his advice, but I probably should.&lt;/p&gt;

&lt;h2 id="no-claim-bonus"&gt;No claim bonus&lt;/h2&gt;

&lt;p&gt;You know how insurance companies have a “no claim bonus”? That’s clever marketing. It means “clients who make claims get charged more”. You can do the same. For difficult clients, or clients where you’ve lost out before, charge them a higher premium for future fixed price work (and recoup some of what you lost previously).&lt;/p&gt;

&lt;h2 id="tracking-time--estimates-vs-actuals"&gt;Tracking time — estimates vs actuals&lt;/h2&gt;

&lt;p&gt;Fixed price means you’re under no obligation to track time. It’s a good idea to do so anyway, for your own future reference. Don’t be too transparent with the client, though.&lt;/p&gt;

&lt;p&gt;If you do fixed price right, there’ll be plenty of times where you come in under estimate, and the client could have got it cheaper at an hourly rate. That’s completely fair — fixed price is insurance, which the client wanted. You took the risk and it paid off. But there’s nothing to be gained from letting the client know that this time, you won.&lt;/p&gt;

&lt;p&gt;Many clients expect a “Fixed price if it goes over estimate, but hourly if it goes under” deal — and that’s simply not viable for you. Fixed price means actual hours aren’t the client’s concern.&lt;/p&gt;

</content>
  </entry>
  <entry>
    <title>Questions for potential employers</title>
    <link rel="alternate" href="http://blog.url.com/blog/2016/08/08/questions-for-potential-employers.html"/>
    <id>http://blog.url.com/blog/2016/08/08/questions-for-potential-employers.html</id>
    <published>2016-08-08T00:00:00Z</published>
    <updated>2021-05-26T17:57:47+10:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Unexpected circumstances have meant I've done two job hunts in recent months. I usually scribble down a handful of questions to ask or consider prior to each interview. Here they are so I can remember and refine them over time.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;What does the business do? Who's the target market? What's the dream? How big to you want to get etc?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How long have you been around? Are you profitable? Have you taken VC? Who are the main people strategically driving the direction of the business?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How big's the dev team? How many people? What roles? Full timers, part timers, contractors? How long have the core members been there? Who would I be reporting to and working with most closely?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How's the leadership structured, and how's work delegated? Top down? Flat? Collaborative? Do you follow any specific development methodologies?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What tech stack are you using? (and subsequently… you mentioned X an Y, which I don't have experience with. Are you OK with that?)
&lt;em&gt;They should at least be fine with you not knowing peripheral technologies in their stack.&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Are you open to remote work? Does anyone actually work remotely? If so, how often? Have you found it good / bad / indifferent? What are typical work hours? Are you flexible with the times people work? Do people take advantage of that flexibility?&lt;br /&gt;
&lt;em&gt;Being "open to remote work" and having people who actually do it are two different things. Likewise for flexible work times.&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What will I learn from a technical standpoint in this role?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What are the career growth opportunities - both within this role / company, and if I were to move on in a year or two's time?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How do you manage technical debt and maintain code quality?&lt;br /&gt;
&lt;em&gt;There are lots of valid answers to this. A vague answer is a red flag.&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Do you pay for employees to go to Ruby Conf and Rails Camp (or other equivalents)? Do you do anything else regarding ongoing professional development for your employees?
A "yes" here is good and reveals a lot about general attitude towards employees.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What are your expectations regarding pay?&lt;br /&gt;
&lt;em&gt;I used to be very uncomfortable talking about pay. One of the best life skills you can get is the ability to talk about it in a confident, upfront, open manner.&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Edits: additional questions / comments given to me on twitter:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/sevenseacat/status/769855544349773825"&gt;Rebecca&lt;/a&gt;: "some of those would be useful to ask to both the employer, and one of the devs you would be working with. Compare the answers."&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/pat/status/769860587677331457"&gt;Pat&lt;/a&gt;: I'd be asking questions about culture and diversity - is it on the company's radar? How are they addressing such things? &lt;br /&gt;
&lt;a href="https://twitter.com/pat/status/769864749735550976"&gt;and&lt;/a&gt;: I'd also be keen to hear about leadership (top-down, collaborative, etc) and ownership (profit-sharing? equity?)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/RudyYazdi/status/769862693205311488"&gt;Rudy&lt;/a&gt;: I'd throw in something along the line of: "how do you measure my performance?" type question too ;)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/grokfail/status/769907753758228480"&gt;Garrow&lt;/a&gt;: how do you decide what gets built? Who does that? How do you measure the success of built thing?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/andrewdotnich/status/770197793424105473"&gt;Andrew&lt;/a&gt;: do you have any references? (I have to provide them, so where are yours?)&lt;/p&gt;
</content>
  </entry>
</feed>


    <!-- Footer -->
    <footer>
      <nav>
        <a class="" href="/">Blog</a>
        &nbsp;&bull;&nbsp;
        <a class="" href="/about.html">About</a>
        &nbsp;&bull;&nbsp;
        <a class="" href="/resume.html">Resume</a>
        &nbsp;&bull;&nbsp;
        <a href="feed.xml">RSS</a>
        &nbsp;&bull;&nbsp;
        <a class="" href="/archives.html">Archives</a>
      </nav>
      <div class="row">
        <div class="col-lg-12">
          <p>Copyright &copy; Joshua Paling 2015</p>
        </div>
      </div>
      <!-- /.row -->
    </footer>

  </div>

</body>
</html>

